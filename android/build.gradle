
buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'

group = 'host.exp.exponent'
version = '1.0.0'

import org.apache.tools.ant.taskdefs.condition.Os

// Custom task for NDK module

def getNdkBuildName() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "ndk-build.cmd"
    } else {
        return "ndk-build"
    }
}

def findNdkBuildFullPath() {
    // we allow to provide full path to ndk-build tool
    if (hasProperty('ndk.command')) {
        return property('ndk.command')
    }
    // or just a path to the containing directory
    if (hasProperty('ndk.path')) {
        def ndkDir = property('ndk.path')
        return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
    }
    if (System.getenv('ANDROID_NDK') != null) {
        def ndkDir = System.getenv('ANDROID_NDK')
        return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
    }
    def ndkDir = android.hasProperty('plugin') ? android.plugin.ndkFolder :
            plugins.getPlugin('com.android.library').hasProperty('sdkHandler') ?
                    plugins.getPlugin('com.android.library').sdkHandler.getNdkFolder() :
                    android.ndkDirectory.absolutePath
    if (ndkDir) {
        return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
    }
    return null
}

def getNdkBuildFullPath() {
    def ndkBuildFullPath = findNdkBuildFullPath()
    if (ndkBuildFullPath == null) {
        throw new GradleScriptException(
                "ndk-build binary cannot be found, check if you've set " +
                        "\$ANDROID_NDK environment variable correctly or if ndk.dir is " +
                        "setup in local.properties",
                null)
    }
    if (!new File(ndkBuildFullPath).canExecute()) {
        throw new GradleScriptException(
                "ndk-build binary " + ndkBuildFullPath + " doesn't exist or isn't executable.\n" +
                        "Check that the \$ANDROID_NDK environment variable, or ndk.dir in local.proerties, is set correctly.\n" +
                        "(On Windows, make sure you escape backslashes in local.properties or use forward slashes, e.g. C:\\\\ndk or C:/ndk rather than C:\\ndk)",
                null)
    }
    return ndkBuildFullPath
}

task buildEXGLNdkLib(dependsOn: ':ReactAndroid:prepareJSC', type: Exec) {
    // This path should work for most apps as it works with modules installed via npm/yarn
    def jscDir = new File(projectDir.parentFile.parentFile, 'react-native/ReactAndroid/build/third-party-ndk/jsc')

    if (!jscDir.exists()) {
      // Exception for Expo Client
      jscDir = new File(projectDir.parentFile.parentFile.parentFile, 'android/ReactAndroid/build/third-party-ndk/jsc')
    }

    inputs.dir('src/main/jni')
    inputs.dir('../cpp')
    outputs.dir("$buildDir/expo-gl-ndk/all")

    commandLine getNdkBuildFullPath(),
            'NDK_PROJECT_PATH=null',
            "NDK_APPLICATION_MK=$projectDir/src/main/jni/Application.mk",
            "NDK_OUT=$temporaryDir",
            "NDK_LIBS_OUT=$buildDir/expo-gl-ndk/all",
            "JSC_DIR=$jscDir.absolutePath",
            '-C', file('src/main/jni').absolutePath,
            '--jobs', Runtime.runtime.availableProcessors()
}

task cleanEXGLNdkLib(type: Exec) {
    commandLine getNdkBuildFullPath(),
            '-C', file('src/main/jni').absolutePath,
            'clean'
}

task packageEXGLNdkLibs(dependsOn: buildEXGLNdkLib, type: Copy) {
    from "$buildDir/expo-gl-ndk/all"
    exclude '**/libjsc.so'
    exclude '**/libgnustl_shared.so'
    into "$buildDir/expo-gl-ndk/exported"
}

//Upload android library to maven with javadoc and android sources
configurations {
    deployerJars
}

//Creating sources with comments
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

//Put the androidSources and javadoc to the artifacts
artifacts {
    archives androidSourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: mavenLocal().url)
        }
    }
}

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        ndk {
            abiFilters 'armeabi-v7a', 'x86'
            moduleName 'expo-gl'
        }

        sourceSets.main {
            jni.srcDirs = []
            jniLibs.srcDir "$buildDir/expo-gl-ndk/exported"
        }

        tasks.withType(JavaCompile) {
            compileTask -> compileTask.dependsOn packageEXGLNdkLibs
        }

        clean.dependsOn cleanEXGLNdkLib
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    mavenCentral()
}

if (new File(rootProject.projectDir.parentFile, 'pubspec.yaml').exists()) {
    apply from: project(":expo_core").file("../expo-core.gradle")
} else if (new File(rootProject.projectDir.parentFile, 'package.json').exists()) {
    apply from: project(":expo-core").file("../expo-core.gradle")
} else {
    throw new GradleException(
            "'expo-core.gradle' was not found in the usual Flutter or React Native dependency locations. " +
                    "This package can only be used in such projects. Are you sure you've installed the dependencies properly?")
}

dependencies {
    expendency 'expo-core'

    implementation 'com.facebook.soloader:soloader:0.1.0'
}
